name: Build and Push to AWS ECR, then deploy to ECS EC2

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - README.md
      - LICENSE
  workflow_dispatch:    


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./task-definition.json
        container-name: ${{ secrets.CONTAINER_NAME }} 
        image: ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.build-image.outputs.image-tag }}

    - name: Debug Rendered Task Definition
      if: ${{ runner.debug }}
      run: cat ${{ steps.task-def.outputs.task-definition }}  
      
    - name: Create ECS Cluster if not exists
      run: |
        CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters ${{ secrets.ECS_CLUSTER }} --query 'clusters[0].status' --output text 2>/dev/null || echo "None")
        if [ "$CLUSTER_EXISTS" = "None" ] || [ "$CLUSTER_EXISTS" = "INACTIVE" ]; then
          echo "Creating ECS cluster..."
          aws ecs create-cluster --cluster-name ${{ secrets.ECS_CLUSTER }}
          echo "ECS cluster created successfully"
        else
          echo "ECS cluster already exists"
        fi
      
    - name: Create ECS Service if not exists
      run: |
        SERVICE_EXISTS=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} --query 'services[0].status' --output text 2>/dev/null || echo "None")
        if [ "$SERVICE_EXISTS" = "None" ] || [ "$SERVICE_EXISTS" = "INACTIVE" ]; then
          echo "Creating ECS service..."
          aws ecs create-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service-name ${{ secrets.ECS_SERVICE }} \
            --task-definition ecommerce-webapp-task-def \
            --desired-count 1 \
            --launch-type EC2 \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=50
          echo "ECS service created successfully"
        else
          echo "ECS service already exists"
        fi
      
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true

  notify:
    needs: deploy
    if: always()
    uses: ./.github/workflows/slack.yml
    with:
      status: ${{ needs.deploy.result }}
    secrets:
      slack_webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
      