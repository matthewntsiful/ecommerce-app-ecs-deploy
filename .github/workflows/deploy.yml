name: Build and Push to AWS ECR, then deploy to ECS EC2

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - README.md
      - LICENSE
  workflow_dispatch:    


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:$IMAGE_TAG
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.build-image.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.build-image.outputs.image-tag }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./task-definition.json
        container-name: ${{ secrets.CONTAINER_NAME }} 
        image: ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.build-image.outputs.image-tag }}

    - name: Debug Rendered Task Definition
      if: ${{ runner.debug }}
      run: cat ${{ steps.task-def.outputs.task-definition }}  
      
   
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true

  notify:
    needs: deploy
    if: always()
    uses: ./.github/workflows/slack.yml
    with:
      status: ${{ needs.deploy.result }}
    secrets:
      slack_webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
      